<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2015 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
-->
<resources>

  <declare-styleable name="MaterialComponentsTheme">
    <!-- The primary branding color for the app. -->
    <attr name="colorPrimary"/>
    <!-- The light variant of the primary color. -->
    <attr name="colorPrimaryLight" format="color"/>
    <!-- The dark variant of the primary color. -->
    <attr name="colorPrimaryDark"/>
    <!-- The secondary branding color for the app, usually a bright complement to the primary branding color. -->
    <attr name="colorSecondary" format="color"/>
    <!-- The light variant of the secondary color. -->
    <attr name="colorSecondaryLight" format="color"/>
    <!-- The dark variant of the secondary color. -->
    <attr name="colorSecondaryDark" format="color"/>
    <!-- The accent color that's applied to many components and controls.
         This is set to colorSecondary by default, but can also be set to colorPrimary.  -->
    <attr name="colorAccent"/>
    <!-- The primary color palette, used by components to choose similar primary colors for
         accessibility. This is expected to either be empty or to contain 10 colors representing
         the primary tonal variations, ordered from light to dark. Reference to a typed array
         resource. -->
    <attr name="colorPalettePrimary" format="reference"/>
    <!-- The secondary color palette, used by components to choose similar secondary colors for
         accessibility. This is expected to either be empty or to contain 10 colors representing
         the secondary tonal variations, ordered from light to dark. Reference to a typed array
         resource. -->
    <attr name="colorPaletteSecondary" format="reference"/>

    <!-- The scrim background that appears below modals and expanded navigation menus.
         The background can either be a color or a bitmap drawable with tileMode set to repeat. -->
    <attr name="scrimBackground" format="color|reference"/>

    <!-- TODO: Need to audit these attributes to see if they are useful. -->
    <attr name="colorMaterialControl" format="color"/>
    <attr name="colorMaterialControlHighlight" format="color"/>

    <!-- Theme to use for modal bottom sheet dialogs spawned from this theme. -->
    <attr name="bottomSheetDialogTheme" format="reference"/>
    <!-- Style to use for modal bottom sheets in this theme. -->
    <attr name="bottomSheetStyle" format="reference"/>
    <!-- Style to use for MaterialButtons in this theme. -->
    <attr name="materialButtonStyle" format="reference"/>
    <!-- Style to use for FloatingActionButtons in this theme. -->
    <attr name="floatingActionButtonStyle" format="reference"/>
  </declare-styleable>

  <declare-styleable name="FloatingActionButton">
    <!-- Background for the FloatingActionButton -->
    <attr name="backgroundTint"/>
    <attr name="backgroundTintMode"/>

    <!-- Ripple color for the FAB. -->
    <attr name="rippleColor" format="color"/>
    <!-- Size for the FAB. -->
    <attr name="fabSize">
      <!-- A size which will change based on the window size. -->
      <enum name="auto" value="-1"/>
      <!-- The normal sized button. -->
      <enum name="normal" value="0"/>
      <!-- The mini sized button. -->
      <enum name="mini" value="1"/>
    </attr>
    <!-- Elevation value for the FAB -->
    <attr name="elevation"/>
    <!-- TranslationZ value for the FAB when pressed-->
    <attr name="pressedTranslationZ" format="dimension"/>
    <!-- The width of the border around the FAB. -->
    <attr name="borderWidth" format="dimension"/>
    <!-- Enable compat padding. -->
    <attr name="useCompatPadding" format="boolean"/>
    <!-- Maximum icon image size. -->
    <attr name="maxImageSize" format="dimension"/>
  </declare-styleable>

  <declare-styleable name="FloatingActionButton_Behavior_Layout">
    <!-- Whether the FAB should automatically hide when there is no space for it. -->
    <attr name="behavior_autoHide" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="ScrimInsetsFrameLayout">
    <attr name="insetForeground" format="color|reference"/>
  </declare-styleable>

  <declare-styleable name="NavigationView">
    <attr name="android:background"/>
    <attr name="android:fitsSystemWindows"/>
    <attr name="android:maxWidth"/>
    <attr name="elevation"/>
    <!-- The menu resource to inflate and populate items from. -->
    <attr name="menu" format="reference"/>
    <attr name="itemIconTint" format="color"/>
    <attr name="itemTextColor" format="color"/>
    <attr name="itemBackground" format="reference"/>
    <attr name="itemTextAppearance" format="reference"/>
    <!-- Layout resource to inflate as the header -->
    <attr name="headerLayout" format="reference"/>
  </declare-styleable>

  <declare-styleable name="ForegroundLinearLayout">
    <attr name="android:foreground"/>
    <attr name="android:foregroundGravity"/>
    <attr name="foregroundInsidePadding" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="TabLayout">
    <!-- Color of the indicator used to show the currently selected tab. -->
    <attr name="tabIndicatorColor" format="color"/>
    <!-- Height of the indicator used to show the currently selected tab. -->
    <attr name="tabIndicatorHeight" format="dimension"/>
    <!-- Position in the Y axis from the starting edge that tabs should be positioned from. -->
    <attr name="tabContentStart" format="dimension"/>
    <!-- Reference to a background to be applied to tabs. -->
    <attr name="tabBackground" format="reference"/>
    <!-- The behavior mode for the Tabs in this layout -->
    <attr name="tabMode">
      <enum name="scrollable" value="0"/>
      <enum name="fixed" value="1"/>
    </attr>
    <!-- Gravity constant for tabs. -->
    <attr name="tabGravity">
      <enum name="fill" value="0"/>
      <enum name="center" value="1"/>
    </attr>
    <!-- The minimum width for tabs. -->
    <attr name="tabMinWidth" format="dimension"/>
    <!-- The maximum width for tabs. -->
    <attr name="tabMaxWidth" format="dimension"/>
    <!-- A reference to a TextAppearance style to be applied to tabs. -->
    <attr name="tabTextAppearance" format="reference"/>
    <!-- The default text color to be applied to tabs. -->
    <attr name="tabTextColor" format="color"/>
    <!-- The text color to be applied to the currently selected tab. -->
    <attr name="tabSelectedTextColor" format="color"/>
    <!-- The preferred padding along the start edge of tabs. -->
    <attr name="tabPaddingStart" format="dimension"/>
    <!-- The preferred padding along the top edge of tabs. -->
    <attr name="tabPaddingTop" format="dimension"/>
    <!-- The preferred padding along the end edge of tabs. -->
    <attr name="tabPaddingEnd" format="dimension"/>
    <!-- The preferred padding along the bottom edge of tabs. -->
    <attr name="tabPaddingBottom" format="dimension"/>
    <!-- The preferred padding along all edges of tabs. -->
    <attr name="tabPadding" format="dimension"/>
  </declare-styleable>

  <declare-styleable name="TabItem">
    <!-- Text to display in the tab. -->
    <attr name="android:text"/>
    <!-- Icon to display in the tab. -->
    <attr name="android:icon"/>
    <!-- A reference to a layout resource to be displayed in the tab. -->
    <attr name="android:layout"/>
  </declare-styleable>

  <declare-styleable name="TextInputLayout">
    <!-- The text color for input text. -->
    <attr name="android:textColorHint"/>

    <!-- The hint to display in the floating label. -->
    <attr name="android:hint"/>
    <!-- Whether the layout's floating label functionality is enabled. -->
    <attr name="hintEnabled" format="boolean"/>
    <!-- Whether to animate hint state changes. -->
    <attr name="hintAnimationEnabled" format="boolean"/>
    <!-- TextAppearance of the hint in the floating label. -->
    <attr name="hintTextAppearance" format="reference"/>

    <!-- Whether the layout's helper text functionality is enabled. -->
    <attr name="helperTextEnabled" format="boolean"/>
    <!-- TextAppearance of the helper text displayed underneath the text input area. -->
    <attr name="helperTextTextAppearance" format="reference"/>

    <!-- Whether the layout is laid out as if an error will be displayed. -->
    <attr name="errorEnabled" format="boolean"/>
    <!-- TextAppearance of any error message displayed. -->
    <attr name="errorTextAppearance" format="reference"/>

    <!-- Whether the layout is laid out as if the character counter will be displayed. -->
    <attr name="counterEnabled" format="boolean"/>
    <!-- The max length to display in the character counter. -->
    <attr name="counterMaxLength" format="integer"/>
    <!-- TextAppearance of the character counter. -->
    <attr name="counterTextAppearance" format="reference"/>
    <!-- TextAppearance of the character counter when the text is longer than the max. -->
    <attr name="counterOverflowTextAppearance" format="reference"/>

    <!-- Whether the view will display a toggle when the EditText has a password. -->
    <attr name="passwordToggleEnabled" format="boolean"/>
    <!-- Drawable to use as the password input visibility toggle icon. -->
    <attr name="passwordToggleDrawable" format="reference"/>
    <!-- Text to set as the content description for the password input visibility toggle. -->
    <attr name="passwordToggleContentDescription" format="string"/>
    <!-- Icon to use for the password input visibility toggle -->
    <attr name="passwordToggleTint" format="color"/>
    <!-- Blending mode used to apply the background tint. -->
    <attr name="passwordToggleTintMode">
      <!-- The tint is drawn on top of the drawable.
           [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
      <enum name="src_over" value="3"/>
      <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
           color channels are thrown out. [Sa * Da, Sc * Da] -->
      <enum name="src_in" value="5"/>
      <!-- The tint is drawn above the drawable, but with the drawable’s alpha
           channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
      <enum name="src_atop" value="9"/>
      <!-- Multiplies the color and alpha channels of the drawable with those of
           the tint. [Sa * Da, Sc * Dc] -->
      <enum name="multiply" value="14"/>
      <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
      <enum name="screen" value="15"/>
    </attr>

    <!-- Whether the text input area should be drawn as a filled box, an outline box, or not as a box.-->
    <attr name="boxBackgroundMode">
      <!-- Specifies that there should be no box set on the text input area. -->
      <enum name="none" value="0"/>
      <!-- Filled box mode for the text input box. -->
      <enum name="filled" value="1"/>
      <!-- Outline box mode for the text input box. -->
      <enum name="outline" value="2"/>
    </attr>

  </declare-styleable>
  <declare-styleable name="SnackbarLayout">
    <attr name="android:maxWidth"/>
    <attr name="elevation"/>
    <attr name="maxActionInlineWidth" format="dimension"/>
  </declare-styleable>

  <declare-styleable name="AppBarLayout">
    <!-- Deprecated. Elevation is now controlled via a state list animator. -->
    <attr name="elevation"/>
    <attr name="android:background"/>
    <!-- The initial expanded state for the AppBarLayout. This only takes effect when this
         view is a direct child of a CoordinatorLayout. -->
    <attr name="expanded" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="AppBarLayoutStates">
    <!-- State value for {@link android.support.design.widget.AppBarLayout} set when the view
         has been collapsed. -->
    <attr name="state_collapsed" format="boolean"/>
    <!-- State value for {@link android.support.design.widget.AppBarLayout} set when the view
         has children which are capable of being collapsed. -->
    <attr name="state_collapsible" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="AppBarLayout_Layout">
    <attr name="layout_scrollFlags">
      <!-- The view will be scroll in direct relation to scroll events. This flag needs to be
           set for any of the other flags to take effect. If any sibling views
           before this one do not have this flag, then this value has no effect. -->
      <flag name="scroll" value="0x1"/>

      <!-- When exiting (scrolling off screen) the view will be scrolled until it is
           'collapsed'. The collapsed height is defined by the view's minimum height. -->
      <flag name="exitUntilCollapsed" value="0x2"/>

      <!-- When entering (scrolling on screen) the view will scroll on any downwards
           scroll event, regardless of whether the scrolling view is also scrolling. This
           is commonly referred to as the 'quick return' pattern. -->
      <flag name="enterAlways" value="0x4"/>

      <!-- An additional flag for 'enterAlways' which modifies the returning view to
           only initially scroll back to it's collapsed height. Once the scrolling view has
           reached the end of it's scroll range, the remainder of this view will be scrolled
           into view. -->
      <flag name="enterAlwaysCollapsed" value="0x8"/>

      <!-- Upon a scroll ending, if the view is only partially visible then it will be
           snapped and scrolled to it's closest edge. -->
      <flag name="snap" value="0x10"/>
    </attr>

    <!-- An interpolator to use when scrolling this View. Only takes effect when View
         is scrollable. -->
    <attr name="layout_scrollInterpolator" format="reference"/>
  </declare-styleable>

  <declare-styleable name="ScrollingViewBehavior_Layout">
    <!-- The amount that the scrolling view should overlap the bottom of any AppBarLayout -->
    <attr name="behavior_overlapTop" format="dimension"/>
  </declare-styleable>

  <declare-styleable name="CollapsingToolbarLayout">
    <!--  Specifies extra space on the start, top, end and bottom
          sides of the the expanded title text. Margin values should be positive. -->
    <attr name="expandedTitleMargin" format="dimension"/>
    <!--  Specifies extra space on the start side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginStart" format="dimension"/>
    <!--  Specifies extra space on the top side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginTop" format="dimension"/>
    <!--  Specifies extra space on the end side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginEnd" format="dimension"/>
    <!--  Specifies extra space on the bottom side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginBottom" format="dimension"/>
    <!-- The text appearance of the CollapsingToolbarLayout's title when it is fully
         'expanded' -->
    <attr name="expandedTitleTextAppearance" format="reference"/>
    <!-- The text appearance of the CollapsingToolbarLayouts title when it is fully
         'collapsed' -->
    <attr name="collapsedTitleTextAppearance" format="reference"/>
    <!-- The drawable to use as a scrim on top of the CollapsingToolbarLayouts content when
         it has been scrolled sufficiently off screen. -->
    <attr name="contentScrim" format="color"/>
    <!-- The drawable to use as a scrim for the status bar content when the
         CollapsingToolbarLayout has been scrolled sufficiently off screen. Only works on
         Lollipop with the correct setup. -->
    <attr name="statusBarScrim" format="color"/>
    <!-- The id of the primary Toolbar child that you wish to use for the purpose of collapsing.
         This Toolbar descendant view does not need to be a direct child of the layout.
         If you do not set this, the first direct Toolbar child found will be used. -->
    <attr name="toolbarId" format="reference"/>
    <!-- Specifies the amount of visible height in pixels used to define when to trigger a
         scrim visibility change. -->
    <attr name="scrimVisibleHeightTrigger" format="dimension"/>
    <!-- Specifies the duration used for scrim visibility animations. -->
    <attr name="scrimAnimationDuration" format="integer"/>

    <!-- Specifies how the title should be positioned when collapsed. -->
    <attr name="collapsedTitleGravity">
      <!-- Push title to the top of its container, not changing its size. -->
      <flag name="top" value="0x30"/>
      <!-- Push title to the bottom of its container, not changing its size. -->
      <flag name="bottom" value="0x50"/>
      <!-- Push title to the left of its container, not changing its size. -->
      <flag name="left" value="0x03"/>
      <!-- Push title to the right of its container, not changing its size. -->
      <flag name="right" value="0x05"/>
      <!-- Place title in the vertical center of its container, not changing its size. -->
      <flag name="center_vertical" value="0x10"/>
      <!-- Grow the vertical size of the title if needed so it completely fills its container. -->
      <flag name="fill_vertical" value="0x70"/>
      <!-- Place title in the horizontal center of its container, not changing its size. -->
      <flag name="center_horizontal" value="0x01"/>
      <!-- Place the title in the center of its container in both the vertical and horizontal axis, not changing its size. -->
      <flag name="center" value="0x11"/>
      <!-- Push title to the beginning of its container, not changing its size. -->
      <flag name="start" value="0x00800003"/>
      <!-- Push title to the end of its container, not changing its size. -->
      <flag name="end" value="0x00800005"/>
    </attr>

    <!-- Specifies how the title should be positioned when expanded. -->
    <attr name="expandedTitleGravity">
      <!-- Push title to the top of its container, not changing its size. -->
      <flag name="top" value="0x30"/>
      <!-- Push title to the bottom of its container, not changing its size. -->
      <flag name="bottom" value="0x50"/>
      <!-- Push title to the left of its container, not changing its size. -->
      <flag name="left" value="0x03"/>
      <!-- Push title to the right of its container, not changing its size. -->
      <flag name="right" value="0x05"/>
      <!-- Place title in the vertical center of its container, not changing its size. -->
      <flag name="center_vertical" value="0x10"/>
      <!-- Grow the vertical size of the title if needed so it completely fills its container. -->
      <flag name="fill_vertical" value="0x70"/>
      <!-- Place title in the horizontal center of its container, not changing its size. -->
      <flag name="center_horizontal" value="0x01"/>
      <!-- Place the title in the center of its container in both the vertical and horizontal axis, not changing its size. -->
      <flag name="center" value="0x11"/>
      <!-- Push title to the beginning of its container, not changing its size. -->
      <flag name="start" value="0x00800003"/>
      <!-- Push title to the end of its container, not changing its size. -->
      <flag name="end" value="0x00800005"/>
    </attr>

    <!-- Whether the CollapsingToolbarLayout should draw its own shrinking/growing title. -->
    <attr name="titleEnabled" format="boolean"/>
    <!-- The title to show when titleEnabled is set to true. -->
    <attr name="title"/>
  </declare-styleable>

  <declare-styleable name="CollapsingToolbarLayout_Layout">
    <attr name="layout_collapseMode">
      <!-- The view will act as normal with no collapsing behavior. -->
      <enum name="none" value="0"/>
      <!-- The view will pin in place. -->
      <enum name="pin" value="1"/>
      <!-- The view will scroll in a parallax fashion. See the
           layout_collapseParallaxMultiplier attribute to change the multiplier. -->
      <enum name="parallax" value="2"/>
    </attr>

    <!-- The multiplier used when layout_collapseMode is set to 'parallax'. The value should
         be between 0.0 and 1.0. -->
    <attr name="layout_collapseParallaxMultiplier" format="float"/>
  </declare-styleable>

  <declare-styleable name="BottomSheetBehavior_Layout">
    <!-- The height of the bottom sheet when it is collapsed. -->
    <attr name="behavior_peekHeight" format="dimension">
      <!-- Peek at the 16:9 ratio keyline of its parent -->
      <enum name="auto" value="-1"/>
    </attr>
    <!-- Whether this bottom sheet can be hidden by dragging it further downwards -->
    <attr name="behavior_hideable" format="boolean"/>
    <!-- Skip the collapsed state once expanded; no effect unless it is hideable -->
    <attr name="behavior_skipCollapsed" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="BottomNavigationView">
    <!-- The menu resource to inflate and populate items from. -->
    <attr name="menu"/>
    <attr name="itemIconTint"/>
    <attr name="itemTextColor"/>
    <attr name="itemBackground"/>
    <attr name="elevation"/>
    <!--
      Whether shifting mode, which hides label on all but the active view, should be enabled
      for BottomNavigationView.
      (see https://material.io/guidelines/components/bottom-navigation.html#bottom-navigation-specs)
    -->
    <attr name="shiftingMode">
      <enum name="off" value="0"/>
      <enum name="on" value="1"/>
      <enum name="auto" value="2"/>
    </attr>
  </declare-styleable>

</resources>
