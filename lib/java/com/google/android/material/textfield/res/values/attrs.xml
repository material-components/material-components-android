<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<resources>

  <!-- Style to use for TextInputLayout in the theme. -->
  <attr name="textInputStyle" format="reference"/>

  <declare-styleable name="TextInputLayout">
    <!-- Whether the layout is enabled -->
    <attr name="android:enabled"/>
    <!-- The hint to display in the floating label. -->
    <attr name="android:hint"/>
    <!-- The text color for the hint when the text field is not activated (such
         as for the resting and disabled states). -->
    <attr name="android:textColorHint"/>

    <!-- Whether the layout's floating label functionality is enabled. -->
    <attr name="hintEnabled" format="boolean"/>
    <!-- Whether to animate hint state changes. -->
    <attr name="hintAnimationEnabled" format="boolean"/>
    <!-- TextAppearance of the hint in the collapsed floating label. -->
    <attr name="hintTextAppearance" format="reference"/>
    <!-- Text color of the hint in the collapsed floating label.
         If set, this takes precedence over hintTextAppearance. -->
    <attr name="hintTextColor" format="color"/>

    <!-- The text to display as helper text underneath the text input area. -->
    <attr name="helperText" format="string"/>
    <!-- Whether the layout's helper text functionality is enabled. -->
    <attr name="helperTextEnabled" format="boolean"/>
    <!-- TextAppearance of the helper text displayed underneath the text input area. -->
    <attr name="helperTextTextAppearance" format="reference"/>
    <!-- Text color of the helper text displayed underneath the text input area.
         If set, this takes precedence over helperTextTextAppearance. -->
    <attr name="helperTextTextColor" format="color"/>

    <!-- Whether the layout is laid out as if an error will be displayed. -->
    <attr name="errorEnabled" format="boolean"/>
    <!-- TextAppearance of any error message displayed. -->
    <attr name="errorTextAppearance" format="reference"/>
    <!-- Text color for any error message displayed.
         If set, this takes precedence over errorTextAppearance. -->
    <attr name="errorTextColor" format="color"/>
    <!-- End icon to be shown when an error is displayed. -->
    <attr name="errorIconDrawable" format="reference"/>
    <!-- Tint color to use for the error icon. -->
    <attr name="errorIconTint" format="reference"/>
    <!-- Blending mode used to apply the error icon tint. -->
    <attr name="errorIconTintMode">
      <!-- The tint is drawn on top of the drawable.
           [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
      <enum name="src_over" value="3"/>
      <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
           color channels are thrown out. [Sa * Da, Sc * Da] -->
      <enum name="src_in" value="5"/>
      <!-- The tint is drawn above the drawable, but with the drawable’s alpha
           channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
      <enum name="src_atop" value="9"/>
      <!-- Multiplies the color and alpha channels of the drawable with those of
           the tint. [Sa * Da, Sc * Dc] -->
      <enum name="multiply" value="14"/>
      <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
      <enum name="screen" value="15"/>
    </attr>

    <!-- Whether the layout is laid out as if the character counter will be displayed. -->
    <attr name="counterEnabled" format="boolean"/>
    <!-- The max length to display in the character counter. -->
    <attr name="counterMaxLength" format="integer"/>
    <!-- TextAppearance of the character counter. -->
    <attr name="counterTextAppearance" format="reference"/>
    <!-- Text color of the character counter.
         If set, this takes precedence over counterTextAppearance. -->
    <attr name="counterTextColor" format="reference"/>
    <!-- TextAppearance of the character counter when the text is longer than the max. -->
    <attr name="counterOverflowTextAppearance" format="reference"/>
    <!-- Text color of the character counter when the text is longer than the max.
         If set, this takes precedence over counterOverflowTextAppearance. -->
    <attr name="counterOverflowTextColor" format="reference"/>

    <!-- The text to display as prefix text in the text input area. -->
    <attr name="prefixText" format="string"/>
    <!-- TextAppearance of the prefix text displayed in the text input area. -->
    <attr name="prefixTextAppearance" format="reference"/>
    <!-- Text color of the prefix text displayed in the text input area.
         If set, this takes precedence over prefixTextAppearance. -->
    <attr name="prefixTextColor" format="color"/>
    <!-- The text to display as suffix text in the text input area. -->
    <attr name="suffixText" format="string"/>
    <!-- TextAppearance of the suffix text displayed in the text input area. -->
    <attr name="suffixTextAppearance" format="reference"/>
    <!-- Text color of the suffix text displayed in the text input area.
         If set, this takes precedence over suffixTextAppearance. -->
    <attr name="suffixTextColor" format="color"/>

    <!-- Drawable to use for the start icon. -->
    <attr name="startIconDrawable" format="reference"/>
    <!-- Text to set as the content description for the start icon. -->
    <attr name="startIconContentDescription" format="string"/>
    <!-- Whether the start icon is checkable. -->
    <attr name="startIconCheckable" format="boolean"/>
    <!-- Tint color to use for the start icon. -->
    <attr name="startIconTint" format="color"/>
    <!-- Blending mode used to apply the background tint. -->
    <attr name="startIconTintMode">
      <!-- The tint is drawn on top of the drawable.
           [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
      <enum name="src_over" value="3"/>
      <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
           color channels are thrown out. [Sa * Da, Sc * Da] -->
      <enum name="src_in" value="5"/>
      <!-- The tint is drawn above the drawable, but with the drawable’s alpha
           channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
      <enum name="src_atop" value="9"/>
      <!-- Multiplies the color and alpha channels of the drawable with those of
           the tint. [Sa * Da, Sc * Dc] -->
      <enum name="multiply" value="14"/>
      <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
      <enum name="screen" value="15"/>
    </attr>
    <!-- The end icon mode of the TextInputLayout. It will display one of the end icons detailed
         below, or no end icon. -->
    <attr name="endIconMode">
      <!-- The view will display a custom icon specified by the user. -->
      <enum name="custom" value="-1"/>
      <!-- No end icon. -->
      <enum name="none" value="0"/>
      <!-- The view will display a toggle when the EditText has a password. -->
      <enum name="password_toggle" value="1"/>
      <!-- The view will display a clear text button while the EditText contains input. -->
      <enum name="clear_text" value="2"/>
      <!-- The view will display a toggle that displays/hides a dropdown menu. -->
      <enum name="dropdown_menu" value="3"/>
    </attr>
    <!-- Drawable to use for the end icon. -->
    <attr name="endIconDrawable" format="reference"/>
    <!-- Text to set as the content description for the end icon. -->
    <attr name="endIconContentDescription" format="string"/>
    <!-- Whether the end icon is checkable. -->
    <attr name="endIconCheckable" format="boolean"/>
    <!-- Tint color to use for the end icon. -->
    <attr name="endIconTint" format="color"/>
    <!-- Blending mode used to apply the background tint. -->
    <attr name="endIconTintMode">
      <!-- The tint is drawn on top of the drawable.
           [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
      <enum name="src_over" value="3"/>
      <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
           color channels are thrown out. [Sa * Da, Sc * Da] -->
      <enum name="src_in" value="5"/>
      <!-- The tint is drawn above the drawable, but with the drawable’s alpha
           channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
      <enum name="src_atop" value="9"/>
      <!-- Multiplies the color and alpha channels of the drawable with those of
           the tint. [Sa * Da, Sc * Dc] -->
      <enum name="multiply" value="14"/>
      <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
      <enum name="screen" value="15"/>
    </attr>

    <!-- Whether the text input area should be drawn as a filled box, an outline box, or not as a box.-->
    <attr name="boxBackgroundMode">
      <!-- Specifies that there should be no box set on the text input area. -->
      <enum name="none" value="0"/>
      <!-- Filled box mode for the text input box. -->
      <enum name="filled" value="1"/>
      <!-- Outline box mode for the text input box. -->
      <enum name="outline" value="2"/>
    </attr>
    <!-- Value to use for the EditText's collapsed top padding in box mode. -->
    <attr name="boxCollapsedPaddingTop" format="dimension"/>
    <!-- The value to use for the box's top start corner radius when in box mode. -->
    <attr name="boxCornerRadiusTopStart" format="dimension"/>
    <!-- The value to use for the box's top end corner radius when in box mode. -->
    <attr name="boxCornerRadiusTopEnd" format="dimension"/>
    <!-- The value to use for the box's bottom start corner radius when in box mode. -->
    <attr name="boxCornerRadiusBottomStart" format="dimension"/>
    <!-- The value to use for the box's bottom end corner radius when in box mode. -->
    <attr name="boxCornerRadiusBottomEnd" format="dimension"/>
    <!-- The color to use for the box's stroke when in outline box mode. -->
    <attr name="boxStrokeColor" format="color"/>
    <!-- The color to use for the box's stroke in outline box mode when an error
         is being displayed. If not set, it defaults to errorTextColor if on
         error state, or to counterOverflowTextColor if on overflow state. -->
    <attr name="boxStrokeErrorColor" format="color"/>
    <!-- The color to use for the box's background color when in filled box mode.
         If a non-stateful color resource is specified, default colors will be used for the hover
         and disabled states.  -->
    <attr name="boxBackgroundColor" format="color"/>
    <!-- The value to use for the box's stroke when in outline box mode, or for the underline stroke
         in filled mode. -->
    <attr name="boxStrokeWidth" format="dimension"/>
    <!-- The value to use for the focused box's stroke when in outline box mode, or for the focused
         underline stroke in filled mode.. -->
    <attr name="boxStrokeWidthFocused" format="dimension"/>

    <!-- Shape appearance style reference for TextInputLayout. Attribute declaration is in the Shape
        package. -->
    <attr name="shapeAppearance"/>
    <!-- Shape appearance overlay style reference for TextInputLayout. To be used to augment
         attributes declared in the shapeAppearance. Attribute declaration is in the Shape
         package. -->
    <attr name="shapeAppearanceOverlay"/>

    <!-- Whether the view will display a toggle when the EditText has a password.
         Deprecated. The view's end icon should be specified via endIconMode instead. -->
    <attr name="passwordToggleEnabled" format="boolean"/>
    <!-- Drawable to use as the password input visibility toggle icon.
         Deprecated. Use endIconDrawable instead. -->
    <attr name="passwordToggleDrawable" format="reference"/>
    <!-- Text to set as the content description for the password input visibility toggle.
         Deprecated. Use endIconContentDescription instead. -->
    <attr name="passwordToggleContentDescription" format="string"/>
    <!-- Icon to use for the password input visibility toggle
         Deprecated. Use endIconTint instead. -->
    <attr name="passwordToggleTint" format="color"/>
    <!-- Blending mode used to apply the background tint.
         Deprecated. Use endIconTintMode instead. -->
    <attr name="passwordToggleTintMode">
      <!-- The tint is drawn on top of the drawable.
           [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
      <enum name="src_over" value="3"/>
      <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
           color channels are thrown out. [Sa * Da, Sc * Da] -->
      <enum name="src_in" value="5"/>
      <!-- The tint is drawn above the drawable, but with the drawable’s alpha
           channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
      <enum name="src_atop" value="9"/>
      <!-- Multiplies the color and alpha channels of the drawable with those of
           the tint. [Sa * Da, Sc * Dc] -->
      <enum name="multiply" value="14"/>
      <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
      <enum name="screen" value="15"/>
    </attr>
  </declare-styleable>

</resources>
