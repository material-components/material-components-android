buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.3.3'
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
  }
}

allprojects {
  repositories {
    jcenter()
    maven {
      url "https://maven.google.com"
    }
  }
}

ext {
  buildToolsVersion = '26.0.0'
  compileSdkVersion = 26
  minSdkVersion = 14
  targetSdkVersion = 26
  supportVersion = '26.1.0'

  testRunnerVersion = '0.6-alpha'
  espressoVersion = '2.3-alpha'

  // Enforce the use of prebuilt dependencies in all sub-projects. This is
  // required for the doclava dependency.
  usePrebuilts = "true"

  // Disable pre-dexing when gradle called with -PdisablePreDex;
  preDexLibs = !project.hasProperty('disablePreDex')

  mavenRepoUrl = (project.hasProperty('mavenRepoUrl')
      ? project.property('mavenRepoUrl') : 'file://localhost/tmp/myRepo/')
  mdcLibraryVersion = '1.0'
}

// lint every library
task(lint) << {
}

// TODO: setup docs build and API txt generation

task clean(type: Delete) {
  delete rootProject.buildDir
}

def getTransformedProjectPath (projectPath) {
  def pathComponents = projectPath.tokenize('/')
  def result = ''
  def currentPath = ''
  pathComponents.each { component ->
    if (currentPath == '') {
      currentPath += component
    } else {
      currentPath += '/' + component
    }
    result += ':' +  currentPath
  }
  return result
}

subprojects {
  version = rootProject.ext.supportVersion
  group = 'com.android.support'

  project.plugins.whenPluginAdded { plugin ->
    def isAndroidLibrary = "com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)
    def isAndroidApp = "com.android.build.gradle.AppPlugin".equals(plugin.class.name)
    def isAndroidTest = "com.android.build.gradle.TestPlugin".equals(plugin.class.name)

    if (isAndroidLibrary || isAndroidApp) {
      // Enable code coverage for debug builds only if we are not running inside the IDE,
      // since enabling coverage reports breaks the method parameter resolution in the IDE
      // debugger. Note that we avoid doing this for Android Test projects as it causes
      // crashes on Dalvik ('Class ref in pre-verified class resolved to unexpected implementation')
      project.android.buildTypes.debug.testCoverageEnabled = !hasProperty('android.injected.invoked.from.ide')
    }

    if (isAndroidLibrary || isAndroidApp || isAndroidTest) {
      // Enforce NewApi lint check as fatal.
      project.android.lintOptions.check 'NewApi'
      project.android.lintOptions.fatal 'NewApi'
      // Output lint errors on stdout
      project.android.lintOptions.textReport true
      project.android.lintOptions.textOutput 'stdout'
      // Disable pre-dexing when gradle called with -PdisablePreDex;
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs

      rootProject.lint.dependsOn project.lint

      project.android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        defaultConfig.minSdkVersion rootProject.ext.minSdkVersion
        defaultConfig.targetSdkVersion rootProject.ext.targetSdkVersion
        // This disables the builds tools automatic vector -> PNG generation
        defaultConfig.generatedDensities = []

        compileOptions.sourceCompatibility JavaVersion.VERSION_1_7
        compileOptions.targetCompatibility JavaVersion.VERSION_1_7

        aaptOptions.additionalParameters "--no-version-vectors"
      }
    }
  }
}
